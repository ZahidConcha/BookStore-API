@page "/authors/edit/{Id}"
@attribute [Authorize(Roles ="Administrator")]
@inject IAuthorRepository authRepo
@inject NavigationManager navManeger

@if (isFailed)
{
    <ErrorMessage message="Something Went Wrong "></ErrorMessage>
}
@if (model == null)
{
    <LodingMessage Message="Loding Author"></LodingMessage>
}
else
{
    <EditForm Model="model" OnValidSubmit="EditAuthor">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class=" form-group">
            <lable for="fistname">Fist Name</lable>
            <InputText @bind-Value="model.Fistname" class="form-control" id="fistname"></InputText>
        </div>
        <div class=" form-group">
            <lable for="lastname">Last Name</lable>
            <InputText @bind-Value="model.Lastname" class="form-control" id="lastname"></InputText>
        </div>
        <div class=" form-group">
            <lable for="bio">Biography</lable>
            <InputTextArea @bind-Value="model.Bio" class="form-control" id="bio"></InputTextArea>
        </div>
        <button class="btn btn-primary" type="submit">Edit Author</button>

        <button @onclick="BackList"> Back to List</button>

    </EditForm>
}




@code {
    [Parameter] public string Id { get; set; }
    private Author model = new Author();
    private bool isFailed = false;

    protected async override Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        model = await authRepo.Get(EndPoints.AuthorsEndPoint, id);

    }

    private void BackList()
    {
        navManeger.NavigateTo("/authors/");
    }

    private async Task EditAuthor()
    {
        bool isSucces = await authRepo.Update(EndPoints.AuthorsEndPoint, model, model.Id);
        if (isSucces)
        {
            BackList();
        }
        else
        {
            isFailed = true;
        }
    }
}
